import typing as t

import mitsuba as mi
import pytest

from ..contexts import KernelDictContext
from ..scenes.core import CompositeSceneElement, NodeSceneElement, Scene, traverse


def check_scene_element(
    instance: t.Union[NodeSceneElement, CompositeSceneElement], mi_cls=None
) -> t.Tuple["mitsuba.Object", dict]:
    """
    Perform kernel dictionary checks on a scene element.

    This function checks if the scene element can produce a valid kernel
    dictionary template, as well as an appropriate parameter table.

    The returned Mitsuba object and parameter table can be used to perform
    additional checks.

    Parameters
    ----------
    instance : :class:`.NodeSceneElement` or :class:`.CompositeSceneElement`
        Node scene element to check.

    mi_cls : :class:`mitsuba.Object`
        Mitsuba class the node scene element expands to. Must be set if
        `instance` is a :class:`.NodeSceneElement`; ignored otherwise.

    Returns
    -------
    mi_obj : :class:`mitsuba.Object`
        Mitsuba object the scene element was expanded to. See notes for details.

    mi_params : dict
        Parameter table of the Mitsuba objects generated by the tested scene
        element.

    Notes
    -----
    * If `instance` is a :class:`.NodeSceneElement`, the corresponding Mitsuba
      object type is checked against `mi_cls`.
    * If `instance` is a :class:`.CompositeSceneElement`, the corresponding
      Mitsuba objects are automatically encapsulated into a
      :class:`mitsuba.Scene` object.
    """
    if isinstance(instance, NodeSceneElement):
        if mi_cls is None:
            raise ValueError("Expected Mitsuba class must be set")
        template, params = traverse(instance)

    elif isinstance(instance, CompositeSceneElement):
        mi_cls = mi.Scene
        template, params = traverse(Scene(objects={"composite": instance}))

    else:
        raise RuntimeError(f"Cannot test type '{instance.__class__}'")

    # Check if the template can be instantiated
    ctx = KernelDictContext()
    kernel_dict = template.render(ctx, drop=True)

    try:
        mi_obj = mi.load_dict(kernel_dict)
    except RuntimeError as e:
        pytest.fail(
            reason=f"could not load scene dictionary, got RuntimeError: {e}\n"
            f"{kernel_dict = }"
        )

    assert isinstance(mi_obj, mi_cls)

    # Check if parameters can be updated
    kernel_params = params.render(ctx)
    mi_params = mi.traverse(mi_obj)

    for key, value in kernel_params.items():
        try:
            mi_params[key] = value
        except KeyError as e:
            pytest.fail(
                reason=f"could not set parameter, got KeyError: {e}\n{mi_params = }"
            )

    mi_params.update()

    return mi_obj, mi_params
